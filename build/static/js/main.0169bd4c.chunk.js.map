{"version":3,"sources":["candy-machine.ts","connection.tsx","MintCountdown.tsx","Header.tsx","MintButton.tsx","Home.tsx","components/layout/coin-snake.png","components/layout/altnavbar.tsx","MintApp.tsx","components/containers/welcomeContainer.tsx","components/containers/nft_carousel.tsx","components/containers/static/media/c2.png","components/containers/static/media/c3.png","components/containers/static/media/c4.png","components/containers/static/media/c5.png","components/containers/static/media/c6.png","components/containers/static/media/c7.png","components/containers/introduction.tsx","components/containers/texts/introductionText.tsx","components/containers/texts/utilityText.tsx","components/containers/texts/gen2t.tsx","components/containers/texts/gen2u.tsx","components/containers/texts/lp.tsx","components/containers/roadmap.tsx","components/containers/team.tsx","components/containers/static/media/team/pp1.gif","components/containers/static/media/team/pp2.png","components/containers/static/media/team/pp3.png","components/containers/static/media/team/pp4.png","components/containers/static/media/team/pp5.png","components/containers/faq.tsx","components/layout/Navbar.tsx","components/Header.tsx","App.tsx","components/Footer.tsx","index.tsx","utils.ts"],"names":["CANDY_MACHINE_PROGRAM","anchor","PublicKey","TOKEN_METADATA_PROGRAM_ID","awaitTransactionSignatureConfirmation","txid","timeout","connection","a","queryStatus","done","status","slot","confirmations","err","subId","Promise","resolve","reject","setTimeout","console","log","getSignatureStatuses","signatureStatuses","value","sleep","_signatureSubscriptions","removeSignatureListener","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","TOKEN_PROGRAM_ID","SYSVAR_RENT_PUBKEY","TransactionInstruction","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","data","Buffer","from","getCandyMachineState","anchorWallet","candyMachineId","provider","preflightCommitment","fetchIdl","idl","program","account","candyMachine","fetch","state","itemsAvailable","toNumber","itemsRedeemed","itemsRemaining","presale","whitelistMintSettings","goLiveDate","Date","getTime","id","isSoldOut","isActive","endSettings","endSettingType","date","number","isPresale","treasury","wallet","tokenMint","gatekeeper","hiddenSettings","price","getMasterEdition","mint","findProgramAddress","toBuffer","getMetadata","getCandyMachineCreator","mintOneToken","Keypair","generate","getAtaForMint","publicKey","userTokenAccountAddress","userPayingAccountAddress","candyMachineAddress","remainingAccounts","signers","cleanupInstructions","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createMintToInstruction","instructions","getNetworkToken","gatekeeperNetwork","push","expireOnUse","CIVIC","getNetworkExpire","whitelistToken","mode","burnEveryTime","whitelistBurnAuthority","getAccountInfo","createApproveInstruction","createRevokeInstruction","transferAuthority","metadataAddress","masterEdition","candyMachineCreator","creatorBump","instruction","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","length","undefined","sendTransactions","txs","map","t","ms","SequenceType","instructionSet","signersSet","sequenceType","Parallel","commitment","successCallback","ind","failCallback","block","WalletNotConnectedError","unsignedTxns","getRecentBlockhash","i","transaction","Transaction","forEach","add","recentBlockhash","blockhash","setSigners","s","partialSign","signAllTransactions","signedTxns","pendingTxns","breakEarlyObject","breakEarly","signedTxnPromise","sendSignedTransaction","signedTransaction","then","catch","reason","StopOnFailure","all","getUnixTs","DEFAULT_TIMEOUT","rawTransaction","serialize","startTime","sendRawTransaction","skipPreflight","confirmation","Error","error","simulateResult","simulateTransaction","logs","line","startsWith","slice","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","args","encoding","_rpcRequest","res","message","result","onSignature","context","e","useStyles","makeStyles","theme","createStyles","root","display","padding","spacing","margin","marginRight","width","height","flexDirection","alignContent","alignItems","justifyContent","background","color","borderRadius","fontSize","fontWeight","item","MintCountdown","style","onComplete","classes","renderer","days","hours","minutes","seconds","completed","className","Paper","elevation","Header","Grid","container","direction","wrap","Typography","variant","getMintPrice","toDate","formatNumber","asNumber","discountPrice","CTAButton","styled","Button","MintButton","onMint","isMinting","useGateway","requestGatewayToken","gatewayStatus","useState","clicked","setClicked","useEffect","GatewayStatus","ACTIVE","disabled","onClick","CircularProgress","ConnectButton","WalletDialogButton","MintContainer","div","Home","props","isUserMinting","setIsUserMinting","setCandyMachine","open","severity","alertState","setAlertState","rpcUrl","rpcHost","useWallet","useMemo","signTransaction","refreshCandyMachineState","useCallback","cndy","document","getElementById","click","connected","mintTxId","txTimeout","msg","code","window","location","reload","indexOf","Container","marginTop","maxWidth","position","backgroundColor","clusterUrl","options","autoShowModal","Snackbar","autoHideDuration","onClose","Alert","MenuItems","title","cName","url","MyNavbar","Navbar","bg","Toggle","Collapse","Nav","idx","Link","to","href","src","logo","alt","Component","createTheme","palette","type","process","getCandyMachineId","network","Connection","startDateSeed","parseInt","REACT_APP_CANDY_START_DATE","App","endpoint","clusterApiUrl","wallets","getPhantomWallet","getSolflareWallet","getSlopeWallet","getSolletWallet","getSolletExtensionWallet","ThemeProvider","ConnectionProvider","WalletProvider","autoConnect","startDate","WelcomeContainer","Row","Col","rounded","CarouselItems","image","NFTCarousel","Carousel","fade","interval","indicators","Item","controls","ProjectIntro","RoadMapItems","items","RoadMap","matches","matchMedia","addEventListener","setState","Card","Body","Title","Text","as","ListGroup","string","TeamMembers","name","role","pp","Team","Img","Subtitle","faqItems","text","Faq","Accordion","eventKey","this","innerWidth","activeClass","spy","smooth","offset","duration","showButton","setShowButton","pageYOffset","scroll","scrollToTop","Footer","ReactDOM","render","StrictMode","path","element","MintApp","numberFormater","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","val","LAMPORTS_PER_SOL","buyer"],"mappings":"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","file":"static/js/main.0169bd4c.chunk.js","sourcesContent":["import * as anchor from '@project-serum/anchor';\r\n\r\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\r\nimport { SystemProgram } from '@solana/web3.js';\r\nimport { sendTransactions } from './connection';\r\n\r\nimport {\r\n  CIVIC,\r\n  getAtaForMint,\r\n  getNetworkExpire,\r\n  getNetworkToken,\r\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n} from './utils';\r\n\r\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\r\n  'cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ',\r\n);\r\n\r\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\r\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\r\n);\r\n\r\ninterface CandyMachineState {\r\n  itemsAvailable: number;\r\n  itemsRedeemed: number;\r\n  itemsRemaining: number;\r\n  treasury: anchor.web3.PublicKey;\r\n  tokenMint: anchor.web3.PublicKey;\r\n  isSoldOut: boolean;\r\n  isActive: boolean;\r\n  isPresale: boolean;\r\n  goLiveDate: anchor.BN;\r\n  price: anchor.BN;\r\n  gatekeeper: null | {\r\n    expireOnUse: boolean;\r\n    gatekeeperNetwork: anchor.web3.PublicKey;\r\n  };\r\n  endSettings: null | {\r\n    number: anchor.BN;\r\n    endSettingType: any;\r\n  };\r\n  whitelistMintSettings: null | {\r\n    mode: any;\r\n    mint: anchor.web3.PublicKey;\r\n    presale: boolean;\r\n    discountPrice: null | anchor.BN;\r\n  };\r\n  hiddenSettings: null | {\r\n    name: string;\r\n    uri: string;\r\n    hash: Uint8Array;\r\n  };\r\n}\r\n\r\nexport interface CandyMachineAccount {\r\n  id: anchor.web3.PublicKey;\r\n  program: anchor.Program;\r\n  state: CandyMachineState;\r\n}\r\n\r\nexport const awaitTransactionSignatureConfirmation = async (\r\n  txid: anchor.web3.TransactionSignature,\r\n  timeout: number,\r\n  connection: anchor.web3.Connection,\r\n  queryStatus = false,\r\n): Promise<anchor.web3.SignatureStatus | null | void> => {\r\n  let done = false;\r\n  let status: anchor.web3.SignatureStatus | null | void = {\r\n    slot: 0,\r\n    confirmations: 0,\r\n    err: null,\r\n  };\r\n  let subId = 0;\r\n  status = await new Promise(async (resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (done) {\r\n        return;\r\n      }\r\n      done = true;\r\n      console.log('Rejecting for timeout...');\r\n      reject({ timeout: true });\r\n    }, timeout);\r\n\r\n    while (!done && queryStatus) {\r\n      // eslint-disable-next-line no-loop-func\r\n      (async () => {\r\n        try {\r\n          const signatureStatuses = await connection.getSignatureStatuses([\r\n            txid,\r\n          ]);\r\n          status = signatureStatuses && signatureStatuses.value[0];\r\n          if (!done) {\r\n            if (!status) {\r\n              console.log('REST null result for', txid, status);\r\n            } else if (status.err) {\r\n              console.log('REST error for', txid, status);\r\n              done = true;\r\n              reject(status.err);\r\n            } else if (!status.confirmations) {\r\n              console.log('REST no confirmations for', txid, status);\r\n            } else {\r\n              console.log('REST confirmation for', txid, status);\r\n              done = true;\r\n              resolve(status);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          if (!done) {\r\n            console.log('REST connection error: txid', txid, e);\r\n          }\r\n        }\r\n      })();\r\n      await sleep(2000);\r\n    }\r\n  });\r\n\r\n  //@ts-ignore\r\n  if (connection._signatureSubscriptions[subId]) {\r\n    connection.removeSignatureListener(subId);\r\n  }\r\n  done = true;\r\n  console.log('Returning status', status);\r\n  return status;\r\n};\r\n\r\nconst createAssociatedTokenAccountInstruction = (\r\n  associatedTokenAddress: anchor.web3.PublicKey,\r\n  payer: anchor.web3.PublicKey,\r\n  walletAddress: anchor.web3.PublicKey,\r\n  splTokenMintAddress: anchor.web3.PublicKey,\r\n) => {\r\n  const keys = [\r\n    { pubkey: payer, isSigner: true, isWritable: true },\r\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\r\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\r\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\r\n    {\r\n      pubkey: anchor.web3.SystemProgram.programId,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    {\r\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n  ];\r\n  return new anchor.web3.TransactionInstruction({\r\n    keys,\r\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n    data: Buffer.from([]),\r\n  });\r\n};\r\n\r\nexport const getCandyMachineState = async (\r\n  anchorWallet: anchor.Wallet,\r\n  candyMachineId: anchor.web3.PublicKey,\r\n  connection: anchor.web3.Connection,\r\n): Promise<CandyMachineAccount> => {\r\n  const provider = new anchor.Provider(connection, anchorWallet, {\r\n    preflightCommitment: 'recent',\r\n  });\r\n\r\n  const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\r\n\r\n  const program = new anchor.Program(idl, CANDY_MACHINE_PROGRAM, provider);\r\n\r\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\r\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\r\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\r\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\r\n\r\n  const presale =\r\n    state.data.whitelistMintSettings &&\r\n    state.data.whitelistMintSettings.presale &&\r\n    (!state.data.goLiveDate ||\r\n      state.data.goLiveDate.toNumber() > new Date().getTime() / 1000);\r\n\r\n  return {\r\n    id: candyMachineId,\r\n    program,\r\n    state: {\r\n      itemsAvailable,\r\n      itemsRedeemed,\r\n      itemsRemaining,\r\n      isSoldOut: itemsRemaining === 0,\r\n      isActive:\r\n        (presale ||\r\n          state.data.goLiveDate?.toNumber() < new Date().getTime() / 1000) &&\r\n        (state.data.endSettings\r\n          ? state.data.endSettings.endSettingType.date\r\n            ? state.data.endSettings.number.toNumber() >\r\n              new Date().getTime() / 1000\r\n            : itemsRedeemed < state.data.endSettings.number.toNumber()\r\n          : true),\r\n      isPresale: presale,\r\n      goLiveDate: state.data.goLiveDate,\r\n      treasury: state.wallet,\r\n      tokenMint: state.tokenMint,\r\n      gatekeeper: state.data.gatekeeper,\r\n      endSettings: state.data.endSettings,\r\n      whitelistMintSettings: state.data.whitelistMintSettings,\r\n      hiddenSettings: state.data.hiddenSettings,\r\n      price: state.data.price,\r\n    },\r\n  };\r\n};\r\n\r\nconst getMasterEdition = async (\r\n  mint: anchor.web3.PublicKey,\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from('metadata'),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n        Buffer.from('edition'),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID,\r\n    )\r\n  )[0];\r\n};\r\n\r\nconst getMetadata = async (\r\n  mint: anchor.web3.PublicKey,\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from('metadata'),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID,\r\n    )\r\n  )[0];\r\n};\r\n\r\nexport const getCandyMachineCreator = async (\r\n  candyMachine: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [Buffer.from('candy_machine'), candyMachine.toBuffer()],\r\n    CANDY_MACHINE_PROGRAM,\r\n  );\r\n};\r\n\r\nexport const mintOneToken = async (\r\n  candyMachine: CandyMachineAccount,\r\n  payer: anchor.web3.PublicKey,\r\n): Promise<(string | undefined)[]> => {\r\n  const mint = anchor.web3.Keypair.generate();\r\n\r\n  const userTokenAccountAddress = (\r\n    await getAtaForMint(mint.publicKey, payer)\r\n  )[0];\r\n\r\n  const userPayingAccountAddress = candyMachine.state.tokenMint\r\n    ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\r\n    : payer;\r\n\r\n  const candyMachineAddress = candyMachine.id;\r\n  const remainingAccounts = [];\r\n  const signers: anchor.web3.Keypair[] = [mint];\r\n  const cleanupInstructions = [];\r\n  const instructions = [\r\n    anchor.web3.SystemProgram.createAccount({\r\n      fromPubkey: payer,\r\n      newAccountPubkey: mint.publicKey,\r\n      space: MintLayout.span,\r\n      lamports:\r\n        await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\r\n          MintLayout.span,\r\n        ),\r\n      programId: TOKEN_PROGRAM_ID,\r\n    }),\r\n    Token.createInitMintInstruction(\r\n      TOKEN_PROGRAM_ID,\r\n      mint.publicKey,\r\n      0,\r\n      payer,\r\n      payer,\r\n    ),\r\n    createAssociatedTokenAccountInstruction(\r\n      userTokenAccountAddress,\r\n      payer,\r\n      payer,\r\n      mint.publicKey,\r\n    ),\r\n    Token.createMintToInstruction(\r\n      TOKEN_PROGRAM_ID,\r\n      mint.publicKey,\r\n      userTokenAccountAddress,\r\n      payer,\r\n      [],\r\n      1,\r\n    ),\r\n  ];\r\n\r\n  if (candyMachine.state.gatekeeper) {\r\n    remainingAccounts.push({\r\n      pubkey: (\r\n        await getNetworkToken(\r\n          payer,\r\n          candyMachine.state.gatekeeper.gatekeeperNetwork,\r\n        )\r\n      )[0],\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n    if (candyMachine.state.gatekeeper.expireOnUse) {\r\n      remainingAccounts.push({\r\n        pubkey: CIVIC,\r\n        isWritable: false,\r\n        isSigner: false,\r\n      });\r\n      remainingAccounts.push({\r\n        pubkey: (\r\n          await getNetworkExpire(\r\n            candyMachine.state.gatekeeper.gatekeeperNetwork,\r\n          )\r\n        )[0],\r\n        isWritable: false,\r\n        isSigner: false,\r\n      });\r\n    }\r\n  }\r\n  if (candyMachine.state.whitelistMintSettings) {\r\n    const mint = new anchor.web3.PublicKey(\r\n      candyMachine.state.whitelistMintSettings.mint,\r\n    );\r\n\r\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\r\n    remainingAccounts.push({\r\n      pubkey: whitelistToken,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n\r\n    if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\r\n      const whitelistBurnAuthority = anchor.web3.Keypair.generate();\r\n\r\n      remainingAccounts.push({\r\n        pubkey: mint,\r\n        isWritable: true,\r\n        isSigner: false,\r\n      });\r\n      remainingAccounts.push({\r\n        pubkey: whitelistBurnAuthority.publicKey,\r\n        isWritable: false,\r\n        isSigner: true,\r\n      });\r\n      signers.push(whitelistBurnAuthority);\r\n      const exists =\r\n        await candyMachine.program.provider.connection.getAccountInfo(\r\n          whitelistToken,\r\n        );\r\n      if (exists) {\r\n        instructions.push(\r\n          Token.createApproveInstruction(\r\n            TOKEN_PROGRAM_ID,\r\n            whitelistToken,\r\n            whitelistBurnAuthority.publicKey,\r\n            payer,\r\n            [],\r\n            1,\r\n          ),\r\n        );\r\n        cleanupInstructions.push(\r\n          Token.createRevokeInstruction(\r\n            TOKEN_PROGRAM_ID,\r\n            whitelistToken,\r\n            payer,\r\n            [],\r\n          ),\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  if (candyMachine.state.tokenMint) {\r\n    const transferAuthority = anchor.web3.Keypair.generate();\r\n\r\n    signers.push(transferAuthority);\r\n    remainingAccounts.push({\r\n      pubkey: userPayingAccountAddress,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n    remainingAccounts.push({\r\n      pubkey: transferAuthority.publicKey,\r\n      isWritable: false,\r\n      isSigner: true,\r\n    });\r\n\r\n    instructions.push(\r\n      Token.createApproveInstruction(\r\n        TOKEN_PROGRAM_ID,\r\n        userPayingAccountAddress,\r\n        transferAuthority.publicKey,\r\n        payer,\r\n        [],\r\n        candyMachine.state.price.toNumber(),\r\n      ),\r\n    );\r\n    cleanupInstructions.push(\r\n      Token.createRevokeInstruction(\r\n        TOKEN_PROGRAM_ID,\r\n        userPayingAccountAddress,\r\n        payer,\r\n        [],\r\n      ),\r\n    );\r\n  }\r\n  const metadataAddress = await getMetadata(mint.publicKey);\r\n  const masterEdition = await getMasterEdition(mint.publicKey);\r\n\r\n  const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\r\n    candyMachineAddress,\r\n  );\r\n\r\n  instructions.push(\r\n    await candyMachine.program.instruction.mintNft(creatorBump, {\r\n      accounts: {\r\n        candyMachine: candyMachineAddress,\r\n        candyMachineCreator,\r\n        payer: payer,\r\n        wallet: candyMachine.state.treasury,\r\n        mint: mint.publicKey,\r\n        metadata: metadataAddress,\r\n        masterEdition,\r\n        mintAuthority: payer,\r\n        updateAuthority: payer,\r\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\r\n        tokenProgram: TOKEN_PROGRAM_ID,\r\n        systemProgram: SystemProgram.programId,\r\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\r\n        recentBlockhashes: anchor.web3.SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\r\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\r\n      },\r\n      remainingAccounts:\r\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\r\n    }),\r\n  );\r\n\r\n  try {\r\n    return (\r\n      await sendTransactions(\r\n        candyMachine.program.provider.connection,\r\n        candyMachine.program.provider.wallet,\r\n        [instructions, cleanupInstructions],\r\n        [signers, []],\r\n      )\r\n    ).txs.map(t => t.txid);\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n\r\n  return [];\r\n};\r\n\r\nexport const shortenAddress = (address: string, chars = 4): string => {\r\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\r\n};\r\n\r\nconst sleep = (ms: number): Promise<void> => {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n};\r\n","import {\r\n  Keypair,\r\n  Commitment,\r\n  Connection,\r\n  RpcResponseAndContext,\r\n  SignatureStatus,\r\n  SimulatedTransactionResponse,\r\n  Transaction,\r\n  TransactionInstruction,\r\n  TransactionSignature,\r\n  Blockhash,\r\n  FeeCalculator,\r\n} from '@solana/web3.js';\r\n\r\nimport { WalletNotConnectedError } from '@solana/wallet-adapter-base';\r\n\r\ninterface BlockhashAndFeeCalculator {\r\n  blockhash: Blockhash;\r\n  feeCalculator: FeeCalculator;\r\n}\r\n\r\nexport const getErrorForTransaction = async (\r\n  connection: Connection,\r\n  txid: string,\r\n) => {\r\n  // wait for all confirmation before geting transaction\r\n  await connection.confirmTransaction(txid, 'max');\r\n\r\n  const tx = await connection.getParsedConfirmedTransaction(txid);\r\n\r\n  const errors: string[] = [];\r\n  if (tx?.meta && tx.meta.logMessages) {\r\n    tx.meta.logMessages.forEach(log => {\r\n      const regex = /Error: (.*)/gm;\r\n      let m;\r\n      while ((m = regex.exec(log)) !== null) {\r\n        // This is necessary to avoid infinite loops with zero-width matches\r\n        if (m.index === regex.lastIndex) {\r\n          regex.lastIndex++;\r\n        }\r\n\r\n        if (m.length > 1) {\r\n          errors.push(m[1]);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport enum SequenceType {\r\n  Sequential,\r\n  Parallel,\r\n  StopOnFailure,\r\n}\r\n\r\nexport async function sendTransactionsWithManualRetry(\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructions: TransactionInstruction[][],\r\n  signers: Keypair[][],\r\n): Promise<(string | undefined)[]> {\r\n  let stopPoint = 0;\r\n  let tries = 0;\r\n  let lastInstructionsLength = null;\r\n  let toRemoveSigners: Record<number, boolean> = {};\r\n  instructions = instructions.filter((instr, i) => {\r\n    if (instr.length > 0) {\r\n      return true;\r\n    } else {\r\n      toRemoveSigners[i] = true;\r\n      return false;\r\n    }\r\n  });\r\n  let ids: string[] = [];\r\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\r\n\r\n  while (stopPoint < instructions.length && tries < 3) {\r\n    instructions = instructions.slice(stopPoint, instructions.length);\r\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\r\n\r\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;\r\n    else tries = 0;\r\n\r\n    try {\r\n      if (instructions.length === 1) {\r\n        const id = await sendTransactionWithRetry(\r\n          connection,\r\n          wallet,\r\n          instructions[0],\r\n          filteredSigners[0],\r\n          'single',\r\n        );\r\n        ids.push(id.txid);\r\n        stopPoint = 1;\r\n      } else {\r\n        const { txs } = await sendTransactions(\r\n          connection,\r\n          wallet,\r\n          instructions,\r\n          filteredSigners,\r\n          SequenceType.StopOnFailure,\r\n          'single',\r\n        );\r\n        ids = ids.concat(txs.map(t => t.txid));\r\n      }\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n    console.log(\r\n      'Died on ',\r\n      stopPoint,\r\n      'retrying from instruction',\r\n      instructions[stopPoint],\r\n      'instructions length is',\r\n      instructions.length,\r\n    );\r\n    lastInstructionsLength = instructions.length;\r\n  }\r\n\r\n  return ids;\r\n}\r\n\r\nexport const sendTransactions = async (\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructionSet: TransactionInstruction[][],\r\n  signersSet: Keypair[][],\r\n  sequenceType: SequenceType = SequenceType.Parallel,\r\n  commitment: Commitment = 'singleGossip',\r\n  successCallback: (txid: string, ind: number) => void = (txid, ind) => {},\r\n  failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\r\n  block?: BlockhashAndFeeCalculator,\r\n): Promise<{ number: number; txs: { txid: string; slot: number }[] }> => {\r\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n  const unsignedTxns: Transaction[] = [];\r\n\r\n  if (!block) {\r\n    block = await connection.getRecentBlockhash(commitment);\r\n  }\r\n\r\n  for (let i = 0; i < instructionSet.length; i++) {\r\n    const instructions = instructionSet[i];\r\n    const signers = signersSet[i];\r\n\r\n    if (instructions.length === 0) {\r\n      continue;\r\n    }\r\n\r\n    let transaction = new Transaction();\r\n    instructions.forEach(instruction => transaction.add(instruction));\r\n    transaction.recentBlockhash = block.blockhash;\r\n    transaction.setSigners(\r\n      // fee payed by the wallet owner\r\n      wallet.publicKey,\r\n      ...signers.map(s => s.publicKey),\r\n    );\r\n\r\n    if (signers.length > 0) {\r\n      transaction.partialSign(...signers);\r\n    }\r\n\r\n    unsignedTxns.push(transaction);\r\n  }\r\n\r\n  const signedTxns = await wallet.signAllTransactions(unsignedTxns);\r\n\r\n  const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\r\n\r\n  let breakEarlyObject = { breakEarly: false, i: 0 };\r\n  console.log(\r\n    'Signed txns length',\r\n    signedTxns.length,\r\n    'vs handed in length',\r\n    instructionSet.length,\r\n  );\r\n  for (let i = 0; i < signedTxns.length; i++) {\r\n    const signedTxnPromise = sendSignedTransaction({\r\n      connection,\r\n      signedTransaction: signedTxns[i],\r\n    });\r\n\r\n    signedTxnPromise\r\n      .then(({ txid, slot }) => {\r\n        successCallback(txid, i);\r\n      })\r\n      .catch(reason => {\r\n        // @ts-ignore\r\n        failCallback(signedTxns[i], i);\r\n        if (sequenceType === SequenceType.StopOnFailure) {\r\n          breakEarlyObject.breakEarly = true;\r\n          breakEarlyObject.i = i;\r\n        }\r\n      });\r\n\r\n    if (sequenceType !== SequenceType.Parallel) {\r\n      try {\r\n        await signedTxnPromise;\r\n      } catch (e) {\r\n        console.log('Caught failure', e);\r\n        if (breakEarlyObject.breakEarly) {\r\n          console.log('Died on ', breakEarlyObject.i);\r\n          // Return the txn we failed on by index\r\n          return {\r\n            number: breakEarlyObject.i,\r\n            txs: await Promise.all(pendingTxns),\r\n          };\r\n        }\r\n      }\r\n    } else {\r\n      pendingTxns.push(signedTxnPromise);\r\n    }\r\n  }\r\n\r\n  if (sequenceType !== SequenceType.Parallel) {\r\n    await Promise.all(pendingTxns);\r\n  }\r\n\r\n  return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\r\n};\r\n\r\nexport const sendTransaction = async (\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructions: TransactionInstruction[],\r\n  signers: Keypair[],\r\n  awaitConfirmation = true,\r\n  commitment: Commitment = 'singleGossip',\r\n  includesFeePayer: boolean = false,\r\n  block?: BlockhashAndFeeCalculator,\r\n) => {\r\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n  let transaction = new Transaction();\r\n  instructions.forEach(instruction => transaction.add(instruction));\r\n  transaction.recentBlockhash = (\r\n    block || (await connection.getRecentBlockhash(commitment))\r\n  ).blockhash;\r\n\r\n  if (includesFeePayer) {\r\n    transaction.setSigners(...signers.map(s => s.publicKey));\r\n  } else {\r\n    transaction.setSigners(\r\n      // fee payed by the wallet owner\r\n      wallet.publicKey,\r\n      ...signers.map(s => s.publicKey),\r\n    );\r\n  }\r\n\r\n  if (signers.length > 0) {\r\n    transaction.partialSign(...signers);\r\n  }\r\n  if (!includesFeePayer) {\r\n    transaction = await wallet.signTransaction(transaction);\r\n  }\r\n\r\n  const rawTransaction = transaction.serialize();\r\n  let options = {\r\n    skipPreflight: true,\r\n    commitment,\r\n  };\r\n\r\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\r\n  let slot = 0;\r\n\r\n  if (awaitConfirmation) {\r\n    const confirmation = await awaitTransactionSignatureConfirmation(\r\n      txid,\r\n      DEFAULT_TIMEOUT,\r\n      connection,\r\n      commitment,\r\n    );\r\n\r\n    if (!confirmation)\r\n      throw new Error('Timed out awaiting confirmation on transaction');\r\n    slot = confirmation?.slot || 0;\r\n\r\n    if (confirmation?.err) {\r\n      const errors = await getErrorForTransaction(connection, txid);\r\n\r\n      console.log(errors);\r\n      throw new Error(`Raw transaction ${txid} failed`);\r\n    }\r\n  }\r\n\r\n  return { txid, slot };\r\n};\r\n\r\nexport const sendTransactionWithRetry = async (\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructions: TransactionInstruction[],\r\n  signers: Keypair[],\r\n  commitment: Commitment = 'singleGossip',\r\n  includesFeePayer: boolean = false,\r\n  block?: BlockhashAndFeeCalculator,\r\n  beforeSend?: () => void,\r\n) => {\r\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n  let transaction = new Transaction();\r\n  instructions.forEach(instruction => transaction.add(instruction));\r\n  transaction.recentBlockhash = (\r\n    block || (await connection.getRecentBlockhash(commitment))\r\n  ).blockhash;\r\n\r\n  if (includesFeePayer) {\r\n    transaction.setSigners(...signers.map(s => s.publicKey));\r\n  } else {\r\n    transaction.setSigners(\r\n      // fee payed by the wallet owner\r\n      wallet.publicKey,\r\n      ...signers.map(s => s.publicKey),\r\n    );\r\n  }\r\n\r\n  if (signers.length > 0) {\r\n    transaction.partialSign(...signers);\r\n  }\r\n  if (!includesFeePayer) {\r\n    transaction = await wallet.signTransaction(transaction);\r\n  }\r\n\r\n  if (beforeSend) {\r\n    beforeSend();\r\n  }\r\n\r\n  const { txid, slot } = await sendSignedTransaction({\r\n    connection,\r\n    signedTransaction: transaction,\r\n  });\r\n\r\n  return { txid, slot };\r\n};\r\n\r\nexport const getUnixTs = () => {\r\n  return new Date().getTime() / 1000;\r\n};\r\n\r\nconst DEFAULT_TIMEOUT = 15000;\r\n\r\nexport async function sendSignedTransaction({\r\n  signedTransaction,\r\n  connection,\r\n  timeout = DEFAULT_TIMEOUT,\r\n}: {\r\n  signedTransaction: Transaction;\r\n  connection: Connection;\r\n  sendingMessage?: string;\r\n  sentMessage?: string;\r\n  successMessage?: string;\r\n  timeout?: number;\r\n}): Promise<{ txid: string; slot: number }> {\r\n  const rawTransaction = signedTransaction.serialize();\r\n  const startTime = getUnixTs();\r\n  let slot = 0;\r\n  const txid: TransactionSignature = await connection.sendRawTransaction(\r\n    rawTransaction,\r\n    {\r\n      skipPreflight: true,\r\n    },\r\n  );\r\n\r\n  console.log('Started awaiting confirmation for', txid);\r\n\r\n  let done = false;\r\n  (async () => {\r\n    while (!done && getUnixTs() - startTime < timeout) {\r\n      connection.sendRawTransaction(rawTransaction, {\r\n        skipPreflight: true,\r\n      });\r\n      await sleep(500);\r\n    }\r\n  })();\r\n  try {\r\n    const confirmation = await awaitTransactionSignatureConfirmation(\r\n      txid,\r\n      timeout,\r\n      connection,\r\n      'recent',\r\n      true,\r\n    );\r\n\r\n    if (!confirmation)\r\n      throw new Error('Timed out awaiting confirmation on transaction');\r\n\r\n    if (confirmation.err) {\r\n      console.error(confirmation.err);\r\n      throw new Error('Transaction failed: Custom instruction error');\r\n    }\r\n\r\n    slot = confirmation?.slot || 0;\r\n  } catch (err: any) {\r\n    console.error('Timeout Error caught', err);\r\n    if (err.timeout) {\r\n      throw new Error('Timed out awaiting confirmation on transaction');\r\n    }\r\n    let simulateResult: SimulatedTransactionResponse | null = null;\r\n    try {\r\n      simulateResult = (\r\n        await simulateTransaction(connection, signedTransaction, 'single')\r\n      ).value;\r\n    } catch (e) {}\r\n    if (simulateResult && simulateResult.err) {\r\n      if (simulateResult.logs) {\r\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\r\n          const line = simulateResult.logs[i];\r\n          if (line.startsWith('Program log: ')) {\r\n            throw new Error(\r\n              'Transaction failed: ' + line.slice('Program log: '.length),\r\n            );\r\n          }\r\n        }\r\n      }\r\n      throw new Error(JSON.stringify(simulateResult.err));\r\n    }\r\n    // throw new Error('Transaction failed');\r\n  } finally {\r\n    done = true;\r\n  }\r\n\r\n  console.log('Latency', txid, getUnixTs() - startTime);\r\n  return { txid, slot };\r\n}\r\n\r\nasync function simulateTransaction(\r\n  connection: Connection,\r\n  transaction: Transaction,\r\n  commitment: Commitment,\r\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\r\n  // @ts-ignore\r\n  transaction.recentBlockhash = await connection._recentBlockhash(\r\n    // @ts-ignore\r\n    connection._disableBlockhashCaching,\r\n  );\r\n\r\n  const signData = transaction.serializeMessage();\r\n  // @ts-ignore\r\n  const wireTransaction = transaction._serialize(signData);\r\n  const encodedTransaction = wireTransaction.toString('base64');\r\n  const config: any = { encoding: 'base64', commitment };\r\n  const args = [encodedTransaction, config];\r\n\r\n  // @ts-ignore\r\n  const res = await connection._rpcRequest('simulateTransaction', args);\r\n  if (res.error) {\r\n    throw new Error('failed to simulate transaction: ' + res.error.message);\r\n  }\r\n  return res.result;\r\n}\r\n\r\nasync function awaitTransactionSignatureConfirmation(\r\n  txid: TransactionSignature,\r\n  timeout: number,\r\n  connection: Connection,\r\n  commitment: Commitment = 'recent',\r\n  queryStatus = false,\r\n): Promise<SignatureStatus | null | void> {\r\n  let done = false;\r\n  let status: SignatureStatus | null | void = {\r\n    slot: 0,\r\n    confirmations: 0,\r\n    err: null,\r\n  };\r\n  let subId = 0;\r\n  status = await new Promise(async (resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (done) {\r\n        return;\r\n      }\r\n      done = true;\r\n      console.log('Rejecting for timeout...');\r\n      reject({ timeout: true });\r\n    }, timeout);\r\n    try {\r\n      subId = connection.onSignature(\r\n        txid,\r\n        (result, context) => {\r\n          done = true;\r\n          status = {\r\n            err: result.err,\r\n            slot: context.slot,\r\n            confirmations: 0,\r\n          };\r\n          if (result.err) {\r\n            console.log('Rejected via websocket', result.err);\r\n            reject(status);\r\n          } else {\r\n            console.log('Resolved via websocket', result);\r\n            resolve(status);\r\n          }\r\n        },\r\n        commitment,\r\n      );\r\n    } catch (e) {\r\n      done = true;\r\n      console.error('WS error in setup', txid, e);\r\n    }\r\n    while (!done && queryStatus) {\r\n      // eslint-disable-next-line no-loop-func\r\n      (async () => {\r\n        try {\r\n          const signatureStatuses = await connection.getSignatureStatuses([\r\n            txid,\r\n          ]);\r\n          status = signatureStatuses && signatureStatuses.value[0];\r\n          if (!done) {\r\n            if (!status) {\r\n              console.log('REST null result for', txid, status);\r\n            } else if (status.err) {\r\n              console.log('REST error for', txid, status);\r\n              done = true;\r\n              reject(status.err);\r\n            } else if (!status.confirmations) {\r\n              console.log('REST no confirmations for', txid, status);\r\n            } else {\r\n              console.log('REST confirmation for', txid, status);\r\n              done = true;\r\n              resolve(status);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          if (!done) {\r\n            console.log('REST connection error: txid', txid, e);\r\n          }\r\n        }\r\n      })();\r\n      await sleep(2000);\r\n    }\r\n  });\r\n\r\n  //@ts-ignore\r\n  if (connection._signatureSubscriptions[subId])\r\n    connection.removeSignatureListener(subId);\r\n  done = true;\r\n  console.log('Returning status', status);\r\n  return status;\r\n}\r\nexport function sleep(ms: number): Promise<void> {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n","import { Paper } from '@material-ui/core';\r\nimport Countdown from 'react-countdown';\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      display: 'flex',\r\n      padding: theme.spacing(0),\r\n      '& > *': {\r\n        margin: theme.spacing(0.5),\r\n        marginRight: 0,\r\n        width: theme.spacing(6),\r\n        height: theme.spacing(6),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignContent: 'center',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        background: '#384457',\r\n        color: 'white',\r\n        borderRadius: 5,\r\n        fontSize: 10,\r\n      },\r\n    },\r\n    done: {\r\n      display: 'flex',\r\n      margin: theme.spacing(1),\r\n      marginRight: 0,\r\n      padding: theme.spacing(1),\r\n      flexDirection: 'column',\r\n      alignContent: 'center',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n      background: '#384457',\r\n      color: 'white',\r\n      borderRadius: 5,\r\n      fontWeight: 'bold',\r\n      fontSize: 18,\r\n    },\r\n    item: {\r\n      fontWeight: 'bold',\r\n      fontSize: 18,\r\n    },\r\n  }),\r\n);\r\n\r\ninterface MintCountdownProps {\r\n  date: Date | undefined;\r\n  style?: React.CSSProperties;\r\n  status?: string;\r\n  onComplete?: () => void;\r\n}\r\n\r\ninterface MintCountdownRender {\r\n  days: number;\r\n  hours: number;\r\n  minutes: number;\r\n  seconds: number;\r\n  completed: boolean;\r\n}\r\n\r\nexport const MintCountdown: React.FC<MintCountdownProps> = ({\r\n  date,\r\n  status,\r\n  style,\r\n  onComplete,\r\n}) => {\r\n  const classes = useStyles();\r\n  const renderCountdown = ({\r\n    days,\r\n    hours,\r\n    minutes,\r\n    seconds,\r\n    completed,\r\n  }: MintCountdownRender) => {\r\n    hours += days * 24;\r\n    if (completed) {\r\n      return status ? <span className={classes.done}>{status}</span> : null;\r\n    } else {\r\n      return (\r\n        <div className={classes.root} style={style}>\r\n          <Paper elevation={0}>\r\n            <span className={classes.item}>\r\n              {hours < 10 ? `0${hours}` : hours}\r\n            </span>\r\n            <span>hrs</span>\r\n          </Paper>\r\n          <Paper elevation={0}>\r\n            <span className={classes.item}>\r\n              {minutes < 10 ? `0${minutes}` : minutes}\r\n            </span>\r\n            <span>mins</span>\r\n          </Paper>\r\n          <Paper elevation={0}>\r\n            <span className={classes.item}>\r\n              {seconds < 10 ? `0${seconds}` : seconds}\r\n            </span>\r\n            <span>secs</span>\r\n          </Paper>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  if (date) {\r\n    return (\r\n      <Countdown\r\n        date={date}\r\n        onComplete={onComplete}\r\n        renderer={renderCountdown}\r\n      />\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n","import * as anchor from '@project-serum/anchor';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { MintCountdown } from './MintCountdown';\r\nimport { toDate, formatNumber } from './utils';\r\nimport { CandyMachineAccount } from './candy-machine';\r\n\r\ntype HeaderProps = {\r\n  candyMachine?: CandyMachineAccount;\r\n};\r\n\r\nexport const Header = ({ candyMachine }: HeaderProps) => {\r\n  return (\r\n    <Grid container direction=\"row\" justifyContent=\"center\" wrap=\"nowrap\">\r\n      <Grid container direction=\"row\" wrap=\"nowrap\">\r\n        {candyMachine && (\r\n          <Grid container direction=\"row\" wrap=\"nowrap\">\r\n            <Grid container direction=\"column\">\r\n              <Typography variant=\"body2\" color=\"textSecondary\">\r\n                Remaining\r\n              </Typography>\r\n              <Typography\r\n                variant=\"h6\"\r\n                color=\"textPrimary\"\r\n                style={{\r\n                  fontWeight: 'bold',\r\n                }}\r\n              >\r\n                {`${candyMachine?.state.itemsRemaining}`}\r\n              </Typography>\r\n            </Grid>\r\n            <Grid container direction=\"column\">\r\n              <Typography variant=\"body2\" color=\"textSecondary\">\r\n                Price\r\n              </Typography>\r\n              <Typography\r\n                variant=\"h6\"\r\n                color=\"textPrimary\"\r\n                style={{ fontWeight: 'bold' }}\r\n              >\r\n                {getMintPrice(candyMachine)}\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n        )}\r\n        <MintCountdown\r\n          date={toDate(\r\n            candyMachine?.state.goLiveDate\r\n              ? candyMachine?.state.goLiveDate\r\n              : candyMachine?.state.isPresale\r\n              ? new anchor.BN(new Date().getTime() / 1000)\r\n              : undefined,\r\n          )}\r\n          style={{ justifyContent: 'flex-end' }}\r\n          status={\r\n            !candyMachine?.state?.isActive || candyMachine?.state?.isSoldOut\r\n              ? 'COMPLETED'\r\n              : candyMachine?.state.isPresale\r\n              ? 'PRESALE'\r\n              : 'LIVE'\r\n          }\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nconst getMintPrice = (candyMachine: CandyMachineAccount): string => {\r\n  const price = formatNumber.asNumber(\r\n    candyMachine.state.isPresale && candyMachine.state.whitelistMintSettings?.discountPrice\r\n      ? candyMachine.state.whitelistMintSettings?.discountPrice!\r\n      : candyMachine.state.price!,\r\n  );\r\n  return `◎ ${price}`;\r\n};\r\n","import styled from 'styled-components';\r\nimport Button from '@material-ui/core/Button';\r\nimport { CandyMachineAccount } from './candy-machine';\r\nimport { CircularProgress } from '@material-ui/core';\r\nimport { GatewayStatus, useGateway } from '@civic/solana-gateway-react';\r\nimport { useEffect, useState } from 'react';\r\n\r\nexport const CTAButton = styled(Button)`\r\n  width: 100%;\r\n  height: 60px;\r\n  margin-top: 10px;\r\n  margin-bottom: 5px;\r\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\r\n  color: white;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n`; // add your own styles here\r\n\r\nexport const MintButton = ({\r\n  onMint,\r\n  candyMachine,\r\n  isMinting,\r\n}: {\r\n  onMint: () => Promise<void>;\r\n  candyMachine?: CandyMachineAccount;\r\n  isMinting: boolean;\r\n}) => {\r\n  const { requestGatewayToken, gatewayStatus } = useGateway();\r\n  const [clicked, setClicked] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (gatewayStatus === GatewayStatus.ACTIVE && clicked) {\r\n      onMint();\r\n      setClicked(false);\r\n    }\r\n  }, [gatewayStatus, clicked, setClicked, onMint]);\r\n\r\n  const getMintButtonContent = () => {\r\n    if (candyMachine?.state.isSoldOut) {\r\n      return 'SOLD OUT';\r\n    } else if (isMinting) {\r\n      return <CircularProgress />;\r\n    } else if (candyMachine?.state.isPresale) {\r\n      return 'PRESALE MINT';\r\n    } else if (clicked && candyMachine?.state.gatekeeper) {\r\n      return <CircularProgress />;\r\n    }\r\n\r\n    return 'MINT';\r\n  };\r\n\r\n  return (\r\n    <CTAButton\r\n      disabled={\r\n        clicked ||\r\n        candyMachine?.state.isSoldOut ||\r\n        isMinting ||\r\n        !candyMachine?.state.isActive\r\n      }\r\n      onClick={async () => {\r\n        setClicked(true);\r\n        if (candyMachine?.state.isActive && candyMachine?.state.gatekeeper) {\r\n          if (gatewayStatus === GatewayStatus.ACTIVE) {\r\n            setClicked(true);\r\n          } else {\r\n            await requestGatewayToken();\r\n          }\r\n        } else {\r\n          await onMint();\r\n          setClicked(false);\r\n        }\r\n      }}\r\n      variant=\"contained\"\r\n    >\r\n      {getMintButtonContent()}\r\n    </CTAButton>\r\n  );\r\n};\r\n","import { useEffect, useMemo, useState, useCallback } from 'react';\r\nimport * as anchor from '@project-serum/anchor';\r\n\r\nimport styled from 'styled-components';\r\nimport { Container, Snackbar } from '@material-ui/core';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport { PublicKey } from '@solana/web3.js';\r\nimport { useWallet } from '@solana/wallet-adapter-react';\r\nimport { WalletDialogButton } from '@solana/wallet-adapter-material-ui';\r\nimport {\r\n  awaitTransactionSignatureConfirmation,\r\n  CandyMachineAccount,\r\n  CANDY_MACHINE_PROGRAM,\r\n  getCandyMachineState,\r\n  mintOneToken,\r\n} from './candy-machine';\r\nimport { AlertState } from './utils';\r\nimport { Header } from './Header';\r\nimport { MintButton } from './MintButton';\r\nimport { GatewayProvider } from '@civic/solana-gateway-react';\r\n\r\nconst ConnectButton = styled(WalletDialogButton)`\r\n  width: 100%;\r\n  height: 60px;\r\n  margin-top: 10px;\r\n  margin-bottom: 5px;\r\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\r\n  color: white;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst MintContainer = styled.div``; // add your owns styles here\r\n\r\nexport interface HomeProps {\r\n  candyMachineId?: anchor.web3.PublicKey;\r\n  connection: anchor.web3.Connection;\r\n  startDate: number;\r\n  txTimeout: number;\r\n  rpcHost: string;\r\n}\r\n\r\nconst Home = (props: HomeProps) => {\r\n  const [isUserMinting, setIsUserMinting] = useState(false);\r\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\r\n  const [alertState, setAlertState] = useState<AlertState>({\r\n    open: false,\r\n    message: '',\r\n    severity: undefined,\r\n  });\r\n\r\n  const rpcUrl = props.rpcHost;\r\n  const wallet = useWallet();\r\n\r\n  const anchorWallet = useMemo(() => {\r\n    if (\r\n      !wallet ||\r\n      !wallet.publicKey ||\r\n      !wallet.signAllTransactions ||\r\n      !wallet.signTransaction\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    return {\r\n      publicKey: wallet.publicKey,\r\n      signAllTransactions: wallet.signAllTransactions,\r\n      signTransaction: wallet.signTransaction,\r\n    } as anchor.Wallet;\r\n  }, [wallet]);\r\n\r\n  const refreshCandyMachineState = useCallback(async () => {\r\n    if (!anchorWallet) {\r\n      return;\r\n    }\r\n\r\n    if (props.candyMachineId) {\r\n      try {\r\n        const cndy = await getCandyMachineState(\r\n          anchorWallet,\r\n          props.candyMachineId,\r\n          props.connection,\r\n        );\r\n        console.log(JSON.stringify(cndy.state, null, 4));\r\n        setCandyMachine(cndy);\r\n      } catch (e) {\r\n        console.log('There was a problem fetching Candy Machine state');\r\n        console.log(e);\r\n      }\r\n    }\r\n  }, [anchorWallet, props.candyMachineId, props.connection]);\r\n\r\n  const onMint = async () => {\r\n    try {\r\n      setIsUserMinting(true);\r\n      document.getElementById('#identity')?.click();\r\n      if (wallet.connected && candyMachine?.program && wallet.publicKey) {\r\n        const mintTxId = (\r\n          await mintOneToken(candyMachine, wallet.publicKey)\r\n        )[0];\r\n\r\n        let status: any = { err: true };\r\n        if (mintTxId) {\r\n          status = await awaitTransactionSignatureConfirmation(\r\n            mintTxId,\r\n            props.txTimeout,\r\n            props.connection,\r\n            true,\r\n          );\r\n        }\r\n\r\n        if (status && !status.err) {\r\n          setAlertState({\r\n            open: true,\r\n            message: 'Congratulations! Mint succeeded!',\r\n            severity: 'success',\r\n          });\r\n        } else {\r\n          setAlertState({\r\n            open: true,\r\n            message: 'Mint failed! Please try again!',\r\n            severity: 'error',\r\n          });\r\n        }\r\n      }\r\n    } catch (error: any) {\r\n      let message = error.msg || 'Minting failed! Please try again!';\r\n      if (!error.msg) {\r\n        if (!error.message) {\r\n          message = 'Transaction Timeout! Please try again.';\r\n        } else if (error.message.indexOf('0x137')) {\r\n          message = `SOLD OUT!`;\r\n        } else if (error.message.indexOf('0x135')) {\r\n          message = `Insufficient funds to mint. Please fund your wallet.`;\r\n        }\r\n      } else {\r\n        if (error.code === 311) {\r\n          message = `SOLD OUT!`;\r\n          window.location.reload();\r\n        } else if (error.code === 312) {\r\n          message = `Minting period hasn't started yet.`;\r\n        }\r\n      }\r\n\r\n      setAlertState({\r\n        open: true,\r\n        message,\r\n        severity: 'error',\r\n      });\r\n    } finally {\r\n      setIsUserMinting(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    refreshCandyMachineState();\r\n  }, [\r\n    anchorWallet,\r\n    props.candyMachineId,\r\n    props.connection,\r\n    refreshCandyMachineState,\r\n  ]);\r\n\r\n  console.log(wallet);\r\n  return (\r\n    <Container style={{ marginTop: 100 }}>\r\n      <Container maxWidth=\"xs\" style={{ position: 'relative' }}>\r\n        <Paper\r\n          style={{ padding: 24, backgroundColor: '#151A1F', borderRadius: 6 }}\r\n        >\r\n          {!wallet.connected ? (\r\n            <ConnectButton>Connect Wallet</ConnectButton>\r\n          ) : ( \r\n            <>\r\n            \r\n              <Header candyMachine={candyMachine} />\r\n              <MintContainer>\r\n                {candyMachine?.state.isActive &&\r\n                candyMachine?.state.gatekeeper &&\r\n                wallet.publicKey &&\r\n                wallet.signTransaction ? (\r\n                  <GatewayProvider\r\n                    wallet={{\r\n                      publicKey:\r\n                        wallet.publicKey ||\r\n                        new PublicKey(CANDY_MACHINE_PROGRAM),\r\n                      //@ts-ignore\r\n                      signTransaction: wallet.signTransaction,\r\n                    }}\r\n                    gatekeeperNetwork={\r\n                      candyMachine?.state?.gatekeeper?.gatekeeperNetwork\r\n                    }\r\n                    clusterUrl={rpcUrl}\r\n                    options={{ autoShowModal: false }}\r\n                  >\r\n                    <MintButton\r\n                      candyMachine={candyMachine}\r\n                      isMinting={isUserMinting}\r\n                      onMint={onMint}\r\n                    />\r\n                  </GatewayProvider>\r\n                ) : (\r\n                  <MintButton\r\n                    candyMachine={candyMachine}\r\n                    isMinting={isUserMinting}\r\n                    onMint={onMint}\r\n                  />\r\n                )}\r\n              </MintContainer>\r\n            </>\r\n          )}\r\n        </Paper>\r\n      </Container>\r\n\r\n      <Snackbar\r\n        open={alertState.open}\r\n        autoHideDuration={6000}\r\n        onClose={() => setAlertState({ ...alertState, open: false })}\r\n      >\r\n        <Alert\r\n          onClose={() => setAlertState({ ...alertState, open: false })}\r\n          severity={alertState.severity}\r\n        >\r\n          {alertState.message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","export default __webpack_public_path__ + \"static/media/coin-snake.00fee077.png\";","import React, { Component } from 'react';\r\nimport { Navbar, Container, Nav } from 'react-bootstrap';\r\nimport { Link } from 'react-scroll';\r\nimport { Link as Redirect } from \"react-router-dom\";\r\n\r\nimport logo from './coin-snake.png';\r\n\r\nconst MenuItems= [\r\n    {\r\n        title: \"Homepage\",\r\n        cName: \"nav-item\",\r\n        url:\"/\",\r\n        id: \"welcome\"\r\n    }\r\n];\r\n\r\n\r\n\r\nexport default class MyNavbar extends Component {\r\n    render(){\r\n        return(\r\n            \r\n            <Navbar bg=\"dark\" variant=\"dark\">\r\n                <Container>\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Nav className=\"me-auto\">\r\n                {MenuItems.map((item, idx) => {\r\n                        return( \r\n                            <Nav.Link className={item.cName} key={idx} >\r\n                                <Redirect to={item.url}>{item.title}</Redirect>\r\n                            </Nav.Link >\r\n                              )\r\n                    })}\r\n                <Nav>\r\n                    <Nav.Link className='nav-item nav-icon' href='https://twitter.com/ChickenFCnft'>\r\n                        <a className=\"logo-item fab fa-twitter fa-2x\" ></a>\r\n                    </Nav.Link>\r\n                    <Nav.Link className='nav-item nav-icon' href='https://discord.gg/chickensfightclub'>\r\n                        <a className=\" logo-item fab fa-discord fa-2x\" ></a>\r\n                    </Nav.Link>\r\n                    <Nav.Link className='nav-item nav-icon' href='https://www.instagram.com/chickenfighterclub/'>\r\n                        <a className=\" logo-item fab fa-instagram fa-2x\"></a>\r\n                    </Nav.Link>\r\n                </Nav>\r\n\r\n\r\n                </Nav>\r\n                </Navbar.Collapse>\r\n                <div className='nav-logo'><a href='/' >\r\n                    <img\r\n                    src={logo}\r\n                    height={180}\r\n                    width={200}\r\n                    className=\"d-inline-block align-center\"\r\n                    alt=\"React Bootstrap logo\"\r\n                /></a>\r\n                </div>\r\n                \r\n                \r\n                \r\n                </Container>\r\n            </Navbar>\r\n\r\n\r\n\r\n        )\r\n    }\r\n}","import './App.css';\r\nimport { useMemo } from 'react';\r\nimport * as anchor from '@project-serum/anchor';\r\nimport Home from './Home';\r\n\r\nimport { clusterApiUrl } from '@solana/web3.js';\r\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\r\nimport {\r\n  getPhantomWallet,\r\n  getSlopeWallet,\r\n  getSolflareWallet,\r\n  getSolletWallet,\r\n  getSolletExtensionWallet,\r\n} from '@solana/wallet-adapter-wallets';\r\n\r\nimport {\r\n  ConnectionProvider,\r\n  WalletProvider,\r\n} from '@solana/wallet-adapter-react';\r\nimport { WalletDialogProvider } from '@solana/wallet-adapter-material-ui';\r\n\r\nimport { ThemeProvider, createTheme } from '@material-ui/core';\r\n\r\nimport Navbar from './components/layout/altnavbar';\r\n\r\nconst theme = createTheme({\r\n  palette: {\r\n    type: 'dark',\r\n  },\r\n});\r\n\r\nconst getCandyMachineId = (): anchor.web3.PublicKey | undefined => {\r\n  try {\r\n    const candyMachineId = new anchor.web3.PublicKey(\r\n      process.env.REACT_APP_CANDY_MACHINE_ID!,\r\n    );\r\n\r\n    return candyMachineId;\r\n  } catch (e) {\r\n    console.log('Failed to construct CandyMachineId', e);\r\n    return undefined;\r\n  }\r\n};\r\n\r\nconst candyMachineId = getCandyMachineId();\r\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\r\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\r\nconst connection = new anchor.web3.Connection(rpcHost\r\n  ? rpcHost\r\n  : anchor.web3.clusterApiUrl('devnet'));\r\n\r\nconst startDateSeed = parseInt(process.env.REACT_APP_CANDY_START_DATE!, 10);\r\nconst txTimeoutInMilliseconds = 30000;\r\n\r\nconst App = () => {\r\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\r\n\r\n  const wallets = useMemo(\r\n    () => [\r\n      getPhantomWallet(),\r\n      getSolflareWallet(),\r\n      getSlopeWallet(),\r\n      getSolletWallet({ network }),\r\n      getSolletExtensionWallet({ network }),\r\n    ],\r\n    [],\r\n  );\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <ConnectionProvider endpoint={endpoint}>\r\n        <WalletProvider wallets={wallets} autoConnect>\r\n          <WalletDialogProvider>\r\n            <Navbar/>\r\n            <Home\r\n              candyMachineId={candyMachineId}\r\n              connection={connection}\r\n              startDate={startDateSeed}\r\n              txTimeout={txTimeoutInMilliseconds}\r\n              rpcHost={rpcHost}\r\n            />\r\n          </WalletDialogProvider>\r\n        </WalletProvider>\r\n      </ConnectionProvider>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { Container, Row, Col } from 'react-bootstrap';\r\nimport { MDBBtn } from 'mdb-react-ui-kit';\r\nimport { Component } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass WelcomeContainer extends Component{\r\n\r\n    render(){\r\n        return(\r\n                <Container id=\"welcome\">\r\n                    <Row>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            <h2>Welcome to SsS NFT!</h2>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                    <MDBBtn rounded color='dark'>\r\n                        <Link className='mintLink' to=\"/mint\" >Mint coming soon !</Link>\r\n                    </MDBBtn>\r\n                    </Row>\r\n                </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default (WelcomeContainer);","import { Container, Carousel, Row, Col } from 'react-bootstrap';\r\nimport { Component } from 'react';\r\nimport c from './static/media/c2.png';\r\nimport c2 from './static/media/c3.png';\r\nimport c3 from './static/media/c4.png';\r\nimport c4 from './static/media/c5.png';\r\nimport c5 from './static/media/c6.png';\r\nimport c6 from './static/media/c7.png';\r\n\r\n\r\nconst CarouselItems= [\r\n    {\r\n        image: c\r\n    }, \r\n    {\r\n        image: c2\r\n    }, \r\n    {\r\n        image: c3\r\n    }, \r\n    {\r\n        image: c4\r\n    },     {\r\n        image: c5\r\n    },     {\r\n        image: c6\r\n    }, \r\n\r\n];\r\n\r\nclass NFTCarousel extends Component{\r\n\r\n    render(){\r\n        return(\r\n            <Container>\r\n                <Container>\r\n                <Row>\r\n                        <Col className='sneakpeeksCol'>\r\n                        <Container className=\"mediaContainer NFT_Carousel sneakpeeksCol\">\r\n                        <Carousel fade={true} interval={1000} indicators={false}>\r\n                        {CarouselItems.map((item, idx) => {\r\n                                        return( \r\n                                            <Carousel.Item>\r\n                                                <img\r\n                                                className=\"d-block w-100\"\r\n                                                src={item.image}\r\n                                                alt=\"First slide\"\r\n                                                />\r\n                                            </Carousel.Item>\r\n                                            )\r\n                                    })}\r\n                            \r\n                        </Carousel>\r\n                        </Container>\r\n                        </Col>\r\n                    </Row>\r\n                    \r\n                <Carousel className='carouselContent' fade indicators={false} controls={false} wrap={true} interval={4000}>\r\n                        <Carousel.Item>\r\n\r\n                        </Carousel.Item>\r\n                        <Carousel.Item>\r\n                   \r\n                        </Carousel.Item>\r\n                    </Carousel>  \r\n                </Container>\r\n            </Container>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default (NFTCarousel);","export default __webpack_public_path__ + \"static/media/c2.f5234252.png\";","export default __webpack_public_path__ + \"static/media/c3.04e3434e.png\";","export default __webpack_public_path__ + \"static/media/c4.ea208622.png\";","export default __webpack_public_path__ + \"static/media/c5.4dba8abe.png\";","export default __webpack_public_path__ + \"static/media/c6.8a585097.png\";","export default __webpack_public_path__ + \"static/media/c7.bbe17ce7.png\";","import { Container, Row, Col } from 'react-bootstrap';\r\nimport { Component } from 'react';\r\nimport introText from './texts/introductionText';\r\nimport uility from './texts/utilityText';\r\nimport gen2t from './texts/gen2t';\r\nimport gen2u from './texts/gen2u';\r\nimport lp from './texts/lp';\r\n\r\n\r\nclass ProjectIntro extends Component{\r\n\r\n    render(){\r\n        return(\r\n            <div id=\"introduction\" className='introContainer'>   \r\n                <h2>Introduction</h2>         \r\n                <Container>\r\n                    <Row>\r\n                        <Col className='sneakpeeksCol'>\r\n                        <Container className=\"mediaContainer NFT_Carousel\">\r\n                        \r\n                        </Container>\r\n                        </Col>\r\n                        <Col className='sneakpeeksCol'>\r\n                        <Container className=\"mediaContainer NFT_Carousel\">\r\n                        \r\n                        </Container>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            <Container>\r\n                                <h3>Gen1 Tokenomics</h3>\r\n                                <p>\r\n                                 {introText}\r\n                                </p>\r\n                            </Container>\r\n                        </Col>\r\n                        <Col>\r\n                            <Container>\r\n                                <h3>Gen1 Utility</h3>\r\n                                <p>\r\n                                 {uility}\r\n                                </p>\r\n                            </Container>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            <Container>\r\n                                    <h3>Gen2 Tokenomics </h3>\r\n                                    <p>\r\n                                    {gen2t}\r\n                                    </p>\r\n                                </Container> \r\n                        </Col>\r\n                        <Col>\r\n                            <Container>\r\n                                    <h3>Gen2 Utility</h3>\r\n                                    <p>\r\n                                    {gen2u}\r\n                                    </p>\r\n                                </Container> \r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            <Container>\r\n                                    <h3>Gen2 Liquidity Pool </h3>\r\n                                    <p>\r\n                                    {lp}\r\n                                    </p>\r\n                                </Container> \r\n                        </Col>\r\n                    </Row>\r\n                </Container> \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default (ProjectIntro);","const introText = `\r\n10 000 000 $TOXIN\r\n-62.5% Gen1 = 6 250 000 \r\n-10% Gen2 = 1 000 000 (From Gen1 to Gen2 (Breeding + Feeding will bring ~ 7% $TOXIN into the Gen2)\r\n-10% Reserve = 1 000 000\r\n-10% Liquidity = 1 000 000\r\n- 7.5% Team = 750 000\r\nGen2 $TOXIN Liquidity will be injected in there own Token once all the GEN2 are out.\r\n\r\n`;\r\n\r\nexport default introText;\r\n","const utilityText =  `\r\nFeeding - Breeding - Staking - Marketplace owner - Merchandise\r\nStaking : Your Snake will produce 10 $TOXIN/DAY\r\nStaking 1/1 : 1/1 snakes will produce 35 $TOXIN/DAY\r\nBreeding : Your Gen2 Snake will cost you 300TOXIN for breeding (Each snake can breed 2 time with a 30Day cooldown)\r\nFeeding : You can feed your snake each day with 10 $TOXIN \r\n*lvl1 to lvl5 = Cost 500 $TOXIN (TOTAL) (50days before lvl5) or you can pay 700$TOXIN and it will be lvl5 instant.\r\nEach Gen2 Snake lvl 5 = 444 000 $TOXIN\r\nEach Gen2 Snake breeding = 266 400 $TOXIN\r\nTotal Gen 2 Breeding + LVL5 = 710 400 $TOXIN\r\nGen2 1/1 auction in $TOXIN\r\nMerchandise : You will be able to buy in our own merchandise store with $TOXIN\r\n\r\n`\r\n\r\nexport default (utilityText);","const gen2tokenomics =  `\r\n20 000 000 $DUST\r\n-70% Gen2 = 14 000 000 \r\n-10% Reserve = 2 000 000\r\n-10% Liquidity = 2 000 000\r\n-10% Team = 2 000 000\r\n`\r\n\r\nexport default (gen2tokenomics);","const utilityText =  `\r\nStaking - Dust Protocol - Merchandise\r\nStaking Levels : \r\n-Level 1 =  6 $DUST/DAY , 100 $TOXIN\r\n-Level 2 = 7.5 $DUST/DAY , 200 $TOXIN\r\n-Level 3 = 9 $DUST/DAY , 300 $TOXIN\r\n-Level 4 = 10.5 $DUST/DAY , 400 $TOXIN\r\n-Level 5 =  12.5 $DUST/DAY , 500 $TOXIN\r\n(8, 1/1) Gen2 1/1 = 40 $DUST/DAY  \r\nMerchandise : You will be able to buy in our own merchandise store with $DUST\r\nDust Protocol : With the weekly Solana volume we are going to buy Blue chips and sell it in auction and you can bid with Dust , you will also be able enter a high Tier whitelist with $DUST\r\n\r\n\r\n`\r\n\r\nexport default (utilityText);","const gen2lp =  `\r\nMagic Eden 60% --> LP\r\nGen2 % $TOXIN --> LP\r\n\r\n`\r\n\r\nexport default (gen2lp);","import { Component } from 'react';\r\nimport { Container, Card, ListGroup, Row } from 'react-bootstrap';\r\n\r\nconst RoadMapItems= [\r\n    {\r\n        title: \"OPERATION 1\",\r\n        items: [\r\n            \"Date: Late February\",\r\n            \"Launch of the Snake Secret Service socials ( twitter, discord)\",\r\n            \"Release 444 snakes on the Solana blockchain.\",\r\n            \"Launch of the DAO :  Involve the DAO for voting our next collection; Vote for alpha’s hunters; Others Utilities through the DAO will be voted.\",\r\n        ]\r\n    }, \r\n    {\r\n        title: \"OPERATION 2 \",\r\n        items: [\r\n            \"Launch token : $TOXIN\",\r\n            \"Breeding\",\r\n            \"Staking\",\r\n            \"Merchandise\",\r\n            \"1/1 Auction\",\r\n        ]\r\n    },\r\n    {\r\n        title: \"OPERATION 3 \",\r\n        items: [\r\n            \"Multi Chain operation: \",\r\n            \"We are going to expand our brand through other blockchain and be the number 1 alpha hunter on each blockchain (This is a hint for our marketplace.)\",\r\n            \"Luna-Near-Egld-Solana , this is our target.\",\r\n            \"Each blockchain collection will have their own games.\",\r\n            \"Each blockchain will have their own ecosystem.\"\r\n        ]\r\n    }, \r\n    {\r\n        title: \"OPERATION 4 \",\r\n        items: [\r\n            \"Create MultiVerseDAO: \",\r\n            \"The DAO will vote for future utilities on each blockchain\",\r\n            \"Access to the MultiVerseDAO will give you the best Alpha on each blockchain.\",\r\n            \"Launch $TOXIN token on Raydium\"\r\n        ]\r\n    },\r\n    {\r\n        title: \"OPERATION 5 \",\r\n        items: [\r\n            \"Marketplace \",\r\n        ]\r\n    },  \r\n\r\n\r\n];\r\n\r\n export default class RoadMap extends Component<any>{\r\n        constructor(props:any) {\r\n            super(props)\r\n            this.state = { matches: window.matchMedia(\"(max-width: 800px)\").matches };\r\n        }\r\n        \r\n        componentDidMount() {\r\n            const handler = (e:any) => this.setState({matches: e.matches});\r\n            window.matchMedia(\"(max-width: 800px)\").addEventListener('change', handler);\r\n        }\r\n\r\n\r\n        render(){\r\n            return(\r\n                <Container id=\"roadmap\" className=\"roadmap-container\">  \r\n                <Row>\r\n                    <h2>Roadmap</h2>  \r\n                 </Row>\r\n                <Container>\r\n                     <Row>\r\n                        {RoadMapItems.map((item, idx) => {\r\n                                 return(\r\n                                    <Card className= 'roadCard col' key={idx}>\r\n                                        <Card.Body >\r\n                                            <Card.Title><h5>{item.title}</h5></Card.Title>\r\n                                            <Card.Text as=\"div\">\r\n                                            <ListGroup>\r\n                                                {item.items.map((string) => {\r\n                                                    return(<ListGroup.Item >{string}</ListGroup.Item>)\r\n                                                })}\r\n                                            </ListGroup>\r\n        \r\n                                            </Card.Text>\r\n                                        </Card.Body>\r\n                                    </Card>\r\n                                     )\r\n                             })}\r\n                    </Row>\r\n                            \r\n                </Container> \r\n                </Container>\r\n\r\n            )\r\n          }\r\n    }","import { Component } from 'react';\r\nimport { Container, Row, Col, Card } from 'react-bootstrap';\r\nimport  pp  from './static/media/team/pp1.gif';\r\nimport  pp1  from './static/media/team/pp2.png';\r\nimport  pp2  from './static/media/team/pp3.png';\r\nimport  pp3  from './static/media/team/pp4.png';\r\nimport  pp4  from './static/media/team/pp5.png';\r\n\r\n\r\nconst TeamMembers= [\r\n    {\r\n        name: \"Lord Snake#4716\",\r\n        role: \"Team\",\r\n        pp: pp\r\n    }, \r\n    {\r\n        name: \" RayK1ng#1248\",\r\n        role: \"Team\",\r\n        pp: pp1\r\n    }, \r\n    {\r\n        name: \"cryptonoodles#4687\",\r\n        role: \"Dev\",\r\n        pp: pp2\r\n    },\r\n    {\r\n        name: \"AlexScotch#0472\",\r\n        role: \"Dev\",\r\n        pp: pp3\r\n    },\r\n    {\r\n        name: \"Sergan.SOL#9391\",\r\n        role: \"Dev\",\r\n        pp: pp4\r\n    }\r\n];\r\n\r\n\r\n  export default  class Team extends Component{\r\n        render(){\r\n            return(\r\n                <div className='introContainer'>\r\n                <Container id=\"team\">   \r\n                    <h2>Team</h2>         \r\n                    <Container >\r\n                        <Container>\r\n                            <Row>\r\n                                    {TeamMembers.map((item, idx) => {\r\n                                        return( \r\n                                            <Col style={{ width: '18rem', margin: 'auto'}}>\r\n                                                <Card className='teamCard'  key={idx}>\r\n                                                    <Card.Img variant=\"top\" src={item.pp}  width={288} height={288}/>\r\n                                                    <Card.Body>\r\n                                                <Card.Title>{item.name}</Card.Title>\r\n                                                <Card.Subtitle className=\"mb-2 text-muted\">{item.role}</Card.Subtitle>\r\n                                                </Card.Body>\r\n                                                </Card>\r\n                                            </Col>\r\n                                            )\r\n                                    })}    \r\n                            </Row>\r\n                        </Container>\r\n                       \r\n                    </Container> \r\n                </Container>\r\n                </div>\r\n\r\n            )\r\n          }\r\n    }\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/pp1.a849aded.gif\";","export default __webpack_public_path__ + \"static/media/pp2.fafe6b75.png\";","export default __webpack_public_path__ + \"static/media/pp3.a2fb2aad.png\";","export default __webpack_public_path__ + \"static/media/pp4.ea208622.png\";","export default __webpack_public_path__ + \"static/media/pp5.13af22d8.png\";","import { Container, Accordion  } from 'react-bootstrap';\r\n\r\nconst faqItems = [\r\n    {\r\n        title: 'Where can I buy Snake Secret Service?',\r\n        text: 'You can only mint on our official website , also we are going to provide secondary marketplace through Magic Eden.'\r\n    },\r\n    {\r\n        title: 'How much is the supply?',\r\n        text: 'Our supply will be 444 Snakes.'\r\n    },\r\n    {\r\n        title: 'When is the mint date?',\r\n        text: 'TBA.'\r\n    },\r\n    {\r\n        title: 'Liquidity Pools?',\r\n        text: 'We have allocated funds to provide LPs for $TOXIN and $DUST.'\r\n    },\r\n    {\r\n        title: '$TOXIN distribution?',\r\n        text: '$TOXIN  can be earned at a rate of 10 $TOXIN per 24 hours per staked SsS.'\r\n    },\r\n    {\r\n        title: 'How can I create a Solana wallet?',\r\n        text: 'Go to Phantom, download the Phantom wallet extension. Once the extension is installed, run the program and create a new wallet.'\r\n    },\r\n    {\r\n        title: 'How do I fund my Phantom wallet with SOL?',\r\n        text: 'Go to Coinbase or Binance (any exchange that sells and supports Solana token transfer) and purchase SOL. Once you have SOL, send it over to your SOL address in your Solana wallet'\r\n    },\r\n    {\r\n        title: 'Will this have utility?',\r\n        text: 'This project is only the beginning stage for an amazing way to earn crypto rewards. Details coming soon. '\r\n    },\r\n]\r\n\r\n const Faq = () => {\r\n\r\n    return(\r\n        <Container className='accordion-container' id=\"faq\">\r\n            <Accordion>\r\n                {faqItems.map((item,idx) => {\r\n                return(\r\n                    <Accordion.Item eventKey={idx.toString()}>\r\n                    <Accordion.Header style={{margin:'auto' }}>{item.title}</Accordion.Header>\r\n                    <Accordion.Body>\r\n                    {item.text}\r\n                    </Accordion.Body>\r\n                </Accordion.Item>\r\n                )\r\n                })}\r\n            </Accordion>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default(Faq);","import React, { Component } from 'react';\r\nimport { Navbar, Container, Nav } from 'react-bootstrap';\r\nimport { Link } from 'react-scroll';\r\nimport { Link as Redirect } from \"react-router-dom\";\r\n\r\nimport logo from './coin-snake.png';\r\n\r\nconst MenuItems= [\r\n    {\r\n        title: \"Introduction\",\r\n        cName: \"nav-item\",\r\n        id: \"introduction\"\r\n    },\r\n    {\r\n        title: \"Roadmap\",\r\n        cName: \"nav-item\",\r\n        id: \"roadmap\"\r\n    },\r\n    {\r\n        title: \"Team\",\r\n        cName: \"nav-item\",\r\n        id: \"team\"\r\n    },\r\n    {\r\n        title: \"FAQ\",\r\n        cName: \"nav-item\",\r\n        id: \"faq\"\r\n    }\r\n\r\n];\r\n\r\n\r\n\r\nexport default class MyNavbar extends Component {\r\n    constructor(props:any) {\r\n        super(props);\r\n        this.state = {width: props.width};\r\n      }\r\n    \r\n      componentWillMount(){\r\n        this.setState({width: window.innerWidth + 'px'});\r\n      }\r\n\r\n    render(){\r\n        return(\r\n            \r\n            <Navbar bg=\"dark\" variant=\"dark\">\r\n                <Container>\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Nav className=\"me-auto\">\r\n                {MenuItems.map((item, idx) => {\r\n                        return( \r\n                            <Nav.Link className={item.cName} key={idx} >\r\n                                <Link\r\n                                activeClass='active'\r\n                                to={item.id}\r\n                                spy={true}\r\n                                smooth={true}\r\n                                offset={0}\r\n                                duration={1000}\r\n                                >\r\n                                    {item.title}\r\n                                </Link>\r\n                            </Nav.Link >\r\n                              )\r\n                    })}\r\n                <Nav>\r\n                    <Nav.Link className='nav-item nav-icon' href='https://twitter.com/ChickenFCnft'>\r\n                        <a className=\"logo-item fab fa-twitter fa-2x\" ></a>\r\n                    </Nav.Link>\r\n                    <Nav.Link className='nav-item nav-icon' href='https://discord.gg/chickensfightclub'>\r\n                        <a className=\" logo-item fab fa-discord fa-2x\" ></a>\r\n                    </Nav.Link>\r\n                    <Nav.Link className='nav-item nav-icon' href='https://www.instagram.com/chickenfighterclub/'>\r\n                        <a className=\" logo-item fab fa-instagram fa-2x\"></a>\r\n                    </Nav.Link>\r\n                </Nav>\r\n\r\n\r\n                </Nav>\r\n                </Navbar.Collapse>\r\n                <div className='nav-logo'><a href='/' >\r\n                    <img\r\n                    src={logo}\r\n                    height={180}\r\n                    width={200}\r\n                    className=\"d-inline-block align-center\"\r\n                    alt=\"React Bootstrap logo\"\r\n                /></a>\r\n                </div>\r\n                \r\n                \r\n                \r\n                </Container>\r\n            </Navbar>\r\n\r\n\r\n\r\n        )\r\n    }\r\n}","import React, {  } from 'react';\r\nimport Navbar from './layout/Navbar';\r\n\r\n\r\n\r\nconst Header = () => {\r\n\r\n\r\n    return (\r\n        <Navbar/>\r\n        )\r\n  \r\n}\r\n\r\nexport default(Header);","import React, { Component, useState, useEffect } from 'react';\r\nimport {animateScroll as scroll} from 'react-scroll';\r\nimport  WelcomeContainer from './components/containers/welcomeContainer';\r\nimport  NFTCarousel from './components/containers/nft_carousel';\r\nimport ProjectIntro from './components/containers/introduction';\r\nimport Separator from './components/containers/separator';\r\nimport Roadmap from './components/containers/roadmap';\r\nimport Team from './components/containers/team';\r\nimport Faq from './components/containers/faq';\r\nimport Header from './components/Header';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { BsFillArrowUpCircleFill } from \"react-icons/bs\";\r\nconst App = () =>{\r\n /*  constructor(props:any) {\r\n      super(props)\r\n      this.state = { matches: window.matchMedia(\"(max-width: 800px)\").matches };\r\n  }\r\n\r\n  componentDidMount() {\r\n      const handler = (e:any) => this.setState({matches: e.matches});\r\n      window.matchMedia(\"(max-width: 800px)\").addEventListener('change', handler);\r\n  }*/\r\n  const [showButton, setShowButton] = useState(false);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", () => {\r\n      if (window.pageYOffset > 300) {\r\n        setShowButton(true);\r\n      } else {\r\n        setShowButton(false);\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  const scrollToTop = () => {\r\n    scroll.scrollToTop();\r\n  };\r\n\r\n    return(\r\n        <div className='app'>\r\n           <Header/>\r\n           <WelcomeContainer/>\r\n           <NFTCarousel/>\r\n           <ProjectIntro/>\r\n           <Roadmap/>\r\n           <Team/>          \r\n           <Faq/>\r\n           {showButton && (\r\n                    <button onClick={scrollToTop} className=\"back-to-top\">\r\n                      <BsFillArrowUpCircleFill/>\r\n                    </button>\r\n                  )}\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default (App);","import { Container, Row } from 'react-bootstrap';\r\nimport { Component } from 'react';\r\nimport {\r\n    MDBFooter,\r\n    MDBContainer,\r\n  } from 'mdb-react-ui-kit';\r\n  import logo from './layout/coin-snake.png';\r\n  import { Link as Redirect } from \"react-router-dom\";\r\n\r\n\r\n\r\nclass Footer extends Component{\r\n\r\n    render(){\r\n        return(\r\n            <Container className='footerContainer'>\r\n                <MDBFooter className='text-center text-white' style={{ backgroundColor: '#353535' }}>\r\n                    <MDBContainer className='pt-4'>\r\n                        <Row>\r\n                        <a href='/'>\r\n                        <img\r\n                            src={logo}       \r\n                            alt=\"React Bootstrap logo\"\r\n                            style={{ margin: 'auto', width:'200px', height:'200px'}}\r\n                        /></a>\r\n                        \r\n                        </Row>\r\n \r\n                    </MDBContainer>\r\n\r\n                    <div className='text-center text-dark p-3' style={{ backgroundColor: 'rgba(255, 255, 255, 0.2)' }}>\r\n                        \r\n                         <a className='text-dark' href='/'>\r\n                          SsS NFT\r\n                        </a>\r\n                    </div>\r\n                </MDBFooter>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default (Footer);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter, Route, Routes  } from \"react-router-dom\";\r\nimport MintApp from './MintApp';\r\nimport App from './App';\r\n\r\n//components\r\nimport Footer from './components/Footer';\r\n\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n        <Routes>\r\n            <Route path ='/' element={<App/>}/>\r\n            <Route path ='/mint' element={<MintApp/>}/>\r\n        </Routes>\r\n    </BrowserRouter>\r\n    <Footer/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n","import * as anchor from '@project-serum/anchor';\r\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\r\nimport { SystemProgram } from '@solana/web3.js';\r\nimport {\r\n  LAMPORTS_PER_SOL,\r\n  SYSVAR_RENT_PUBKEY,\r\n  TransactionInstruction,\r\n} from '@solana/web3.js';\r\n\r\nexport interface AlertState {\r\n  open: boolean;\r\n  message: string;\r\n  severity: 'success' | 'info' | 'warning' | 'error' | undefined;\r\n}\r\n\r\nexport const toDate = (value?: anchor.BN) => {\r\n  if (!value) {\r\n    return;\r\n  }\r\n\r\n  return new Date(value.toNumber() * 1000);\r\n};\r\n\r\nconst numberFormater = new Intl.NumberFormat('en-US', {\r\n  style: 'decimal',\r\n  minimumFractionDigits: 2,\r\n  maximumFractionDigits: 2,\r\n});\r\n\r\nexport const formatNumber = {\r\n  format: (val?: number) => {\r\n    if (!val) {\r\n      return '--';\r\n    }\r\n\r\n    return numberFormater.format(val);\r\n  },\r\n  asNumber: (val?: anchor.BN) => {\r\n    if (!val) {\r\n      return undefined;\r\n    }\r\n\r\n    return val.toNumber() / LAMPORTS_PER_SOL;\r\n  },\r\n};\r\n\r\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\r\n  new anchor.web3.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\r\n\r\nexport const CIVIC = new anchor.web3.PublicKey(\r\n  'gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs',\r\n);\r\n\r\nexport const getAtaForMint = async (\r\n  mint: anchor.web3.PublicKey,\r\n  buyer: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\r\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n  );\r\n};\r\n\r\nexport const getNetworkExpire = async (\r\n  gatekeeperNetwork: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [gatekeeperNetwork.toBuffer(), Buffer.from('expire')],\r\n    CIVIC,\r\n  );\r\n};\r\n\r\nexport const getNetworkToken = async (\r\n  wallet: anchor.web3.PublicKey,\r\n  gatekeeperNetwork: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [\r\n      wallet.toBuffer(),\r\n      Buffer.from('gateway'),\r\n      Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\r\n      gatekeeperNetwork.toBuffer(),\r\n    ],\r\n    CIVIC,\r\n  );\r\n};\r\n\r\nexport function createAssociatedTokenAccountInstruction(\r\n  associatedTokenAddress: anchor.web3.PublicKey,\r\n  payer: anchor.web3.PublicKey,\r\n  walletAddress: anchor.web3.PublicKey,\r\n  splTokenMintAddress: anchor.web3.PublicKey,\r\n) {\r\n  const keys = [\r\n    {\r\n      pubkey: payer,\r\n      isSigner: true,\r\n      isWritable: true,\r\n    },\r\n    {\r\n      pubkey: associatedTokenAddress,\r\n      isSigner: false,\r\n      isWritable: true,\r\n    },\r\n    {\r\n      pubkey: walletAddress,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: splTokenMintAddress,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: SystemProgram.programId,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: TOKEN_PROGRAM_ID,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: SYSVAR_RENT_PUBKEY,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n  ];\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n    data: Buffer.from([]),\r\n  });\r\n}\r\n"],"sourceRoot":""}